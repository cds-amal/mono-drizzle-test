!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("redux-saga"),require("redux"),require("web3"),require("is-plain-object"),require("deepmerge"),require("eth-block-tracker-es5")):"function"==typeof define&&define.amd?define(["redux-saga","redux","web3","is-plain-object","deepmerge","eth-block-tracker-es5"],e):"object"==typeof exports?exports.drizzle=e(require("redux-saga"),require("redux"),require("web3"),require("is-plain-object"),require("deepmerge"),require("eth-block-tracker-es5")):t.drizzle=e(t["redux-saga"],t.redux,t.web3,t["is-plain-object"],t.deepmerge,t["eth-block-tracker-es5"])}(window,function(t,e,n,r,o,a){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=139)}([function(t,e,n){var r=n(38)("wks"),o=n(25),a=n(1).Symbol,u="function"==typeof a;(t.exports=function(t){return r[t]||(r[t]=u&&a[t]||(u?a:o)("Symbol."+t))}).store=r},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){var n=t.exports={version:"2.5.3"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r=n(5),o=n(79),a=n(44),u=Object.defineProperty;e.f=n(4)?Object.defineProperty:function(t,e,n){if(r(t),e=a(e,!0),r(n),o)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(17)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(10);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e,n){var r=n(1),o=n(2),a=n(18),u=n(11),c=function(t,e,n){var i,s,f,l=t&c.F,d=t&c.G,p=t&c.S,v=t&c.P,h=t&c.B,y=t&c.W,g=d?o:o[e]||(o[e]={}),b=g.prototype,m=d?r:p?r[e]:(r[e]||{}).prototype;for(i in d&&(n=e),n)(s=!l&&m&&void 0!==m[i])&&i in g||(f=s?m[i]:n[i],g[i]=d&&"function"!=typeof m[i]?n[i]:h&&s?a(f,r):y&&m[i]==f?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(f):v&&"function"==typeof f?a(Function.call,f):f,v&&((g.virtual||(g.virtual={}))[i]=f,t&c.R&&b&&!b[i]&&u(b,i,f)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e,n){"use strict";n.r(e);Object.assign;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(t){return"@@redux-saga/"+t},a=o("TASK"),u=o("HELPER"),c=o("CANCEL_PROMISE"),i=o("SELF_CANCELLATION"),s=function(t){return function(){return t}},f=s(!0),l=function(){},d=function(t){return t};function p(t,e,n){if(!e(t))throw function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";"undefined"==typeof window?console.log("redux-saga "+t+": "+e+"\n"+(n&&n.stack||n)):console[t](e,n)}("error","uncaught at check",n),new Error(n)}var v=Object.prototype.hasOwnProperty;function h(t,e){return y.notUndef(t)&&v.call(t,e)}var y={undef:function(t){return null===t||void 0===t},notUndef:function(t){return null!==t&&void 0!==t},func:function(t){return"function"==typeof t},number:function(t){return"number"==typeof t},string:function(t){return"string"==typeof t},array:Array.isArray,object:function(t){return t&&!y.array(t)&&"object"===(void 0===t?"undefined":r(t))},promise:function(t){return t&&y.func(t.then)},iterator:function(t){return t&&y.func(t.next)&&y.func(t.throw)},iterable:function(t){return t&&y.func(Symbol)?y.func(t[Symbol.iterator]):y.array(t)},task:function(t){return t&&t[a]},observable:function(t){return t&&y.func(t.subscribe)},buffer:function(t){return t&&y.func(t.isEmpty)&&y.func(t.take)&&y.func(t.put)},pattern:function(t){return t&&(y.string(t)||"symbol"===(void 0===t?"undefined":r(t))||y.func(t)||y.array(t))},channel:function(t){return t&&y.func(t.take)&&y.func(t.close)},helper:function(t){return t&&t[u]},stringableFunc:function(t){return y.func(t)&&h(t,"toString")}};function g(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=void 0,r=new Promise(function(r){n=setTimeout(function(){return r(e)},t)});return r[c]=function(){return clearTimeout(n)},r}var b=function(t){throw t},m=function(t){return{value:t,done:!0}};function _(t,e){return function(){return t.apply(void 0,arguments)}}var x=function(t,e){return(t?t+".":"")+"setContext(props): argument "+e+" is not a plain object"},w={done:!0,value:void 0},C={};function O(t){return y.channel(t)?"channel":Array.isArray(t)?String(t.map(function(t){return String(t)})):String(t)}function E(t,e){var n=void 0,r=e;function o(e,o){if(r===C)return w;if(o)throw r=C,o;n&&n(e);var a=t[r](),u=a[0],c=a[1],i=a[2];return n=i,(r=u)===C?w:c}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:b,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=arguments[3],o={name:n,next:t,throw:e,return:m};return r&&(o[u]=!0),"undefined"!=typeof Symbol&&(o[Symbol.iterator]=function(){return o}),o}(o,function(t){return o(null,t)},arguments.length>2&&void 0!==arguments[2]?arguments[2]:"iterator",!0)}var k="Channel's Buffer overflow!",N=1,T=3,S=4,A={isEmpty:f,put:l,take:l};function I(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,e=arguments[1],n=new Array(t),r=0,o=0,a=0,u=function(e){n[o]=e,o=(o+1)%t,r++},c=function(){if(0!=r){var e=n[a];return n[a]=null,r--,a=(a+1)%t,e}},i=function(){for(var t=[];r;)t.push(c());return t};return{isEmpty:function(){return 0==r},put:function(c){if(r<t)u(c);else{var s=void 0;switch(e){case N:throw new Error(k);case T:n[o]=c,a=o=(o+1)%t;break;case S:s=2*t,n=i(),r=n.length,o=n.length,a=0,n.length=s,t=s,u(c)}}},take:c,flush:i}}var L={none:function(){return A},fixed:function(t){return I(t,N)},dropping:function(t){return I(t,2)},sliding:function(t){return I(t,T)},expanding:function(t){return I(t,S)}};Object.assign;var j={type:"@@redux-saga/CHANNEL_END"};function P(t,e){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var a={done:!1,value:nt(t)},u=void 0,c=function(t){return u=t};return E({q1:function(){return["q2",a,c]},q2:function(){return u===j?[C]:["q1",function(t){return{done:!1,value:lt.apply(void 0,[e].concat(r,[t]))}}(u)]}},"q1","takeEvery("+O(t)+", "+e.name+")")}function R(t,e){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var a={done:!1,value:nt(t)},u=function(t){return{done:!1,value:lt.apply(void 0,[e].concat(r,[t]))}},c=void 0,i=void 0,s=function(t){return c=t},f=function(t){return i=t};return E({q1:function(){return["q2",a,f]},q2:function(){return i===j?[C]:c?["q3",function(t){return{done:!1,value:vt(t)}}(c)]:["q1",u(i),s]},q3:function(){return["q1",u(i),s]}},"q1","takeLatest("+O(t)+", "+e.name+")")}function M(t,e,n){for(var r=arguments.length,o=Array(r>3?r-3:0),a=3;a<r;a++)o[a-3]=arguments[a];var u=void 0,c=void 0,i={done:!1,value:yt(e,L.sliding(1))},s={done:!1,value:it(g,t)},f=function(t){return u=t},l=function(t){return c=t};return E({q1:function(){return["q2",i,l]},q2:function(){return["q3",{done:!1,value:nt(c)},f]},q3:function(){return u===j?[C]:["q4",function(t){return{done:!1,value:lt.apply(void 0,[n].concat(o,[t]))}}(u)]},q4:function(){return["q2",s]}},"q1","throttle("+O(e)+", "+n.name+")")}var D=o("IO"),F="TAKE",z="PUT",H="ALL",B="RACE",G="CALL",U="CPS",q="FORK",W="JOIN",K="CANCEL",X="SELECT",Z="ACTION_CHANNEL",V="CANCELLED",Y="FLUSH",J="GET_CONTEXT",Q="SET_CONTEXT",$="\n(HINT: if you are getting this errors in tests, consider using createMockTask from redux-saga/utils)",tt=function(t,e){var n;return(n={})[D]=!0,n[t]=e,n},et=function(t){return p(Et.fork(t),y.object,"detach(eff): argument must be a fork effect"),t[q].detached=!0,t};function nt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"*";if(arguments.length&&p(arguments[0],y.notUndef,"take(patternOrChannel): patternOrChannel is undefined"),y.pattern(t))return tt(F,{pattern:t});if(y.channel(t))return tt(F,{channel:t});throw new Error("take(patternOrChannel): argument "+String(t)+" is not valid channel or a valid pattern")}nt.maybe=function(){var t=nt.apply(void 0,arguments);return t[F].maybe=!0,t};var rt=_(nt.maybe);function ot(t,e){return arguments.length>1?(p(t,y.notUndef,"put(channel, action): argument channel is undefined"),p(t,y.channel,"put(channel, action): argument "+t+" is not a valid channel"),p(e,y.notUndef,"put(channel, action): argument action is undefined")):(p(t,y.notUndef,"put(action): argument action is undefined"),e=t,t=null),tt(z,{channel:t,action:e})}function at(t){return tt(H,t)}function ut(t){return tt(B,t)}function ct(t,e,n){p(e,y.notUndef,t+": argument fn is undefined");var r=null;if(y.array(e)){var o=e;r=o[0],e=o[1]}else if(e.fn){var a=e;r=a.context,e=a.fn}return r&&y.string(e)&&y.func(r[e])&&(e=r[e]),p(e,y.func,t+": argument "+e+" is not a function"),{context:r,fn:e,args:n}}function it(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return tt(G,ct("call",t,n))}function st(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return tt(G,ct("apply",{context:t,fn:e},n))}function ft(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return tt(U,ct("cps",t,n))}function lt(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return tt(q,ct("fork",t,n))}function dt(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return et(lt.apply(void 0,[t].concat(n)))}function pt(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];if(e.length>1)return at(e.map(function(t){return pt(t)}));var r=e[0];return p(r,y.notUndef,"join(task): argument task is undefined"),p(r,y.task,"join(task): argument "+r+" is not a valid Task object "+$),tt(W,r)}function vt(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];if(e.length>1)return at(e.map(function(t){return vt(t)}));var r=e[0];return 1===e.length&&(p(r,y.notUndef,"cancel(task): argument task is undefined"),p(r,y.task,"cancel(task): argument "+r+" is not a valid Task object "+$)),tt(K,r||i)}function ht(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return 0===arguments.length?t=d:(p(t,y.notUndef,"select(selector,[...]): argument selector is undefined"),p(t,y.func,"select(selector,[...]): argument "+t+" is not a function")),tt(X,{selector:t,args:n})}function yt(t,e){return p(t,y.notUndef,"actionChannel(pattern,...): argument pattern is undefined"),arguments.length>1&&(p(e,y.notUndef,"actionChannel(pattern, buffer): argument buffer is undefined"),p(e,y.buffer,"actionChannel(pattern, buffer): argument "+e+" is not a valid buffer")),tt(Z,{pattern:t,buffer:e})}function gt(){return tt(V,{})}function bt(t){return p(t,y.channel,"flush(channel): argument "+t+" is not valid channel"),tt(Y,t)}function mt(t){return p(t,y.string,"getContext(prop): argument "+t+" is not a string"),tt(J,t)}function _t(t){return p(t,y.object,x(null,t)),tt(Q,t)}function xt(t,e){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];return lt.apply(void 0,[P,t,e].concat(r))}function wt(t,e){for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];return lt.apply(void 0,[R,t,e].concat(r))}function Ct(t,e,n){for(var r=arguments.length,o=Array(r>3?r-3:0),a=3;a<r;a++)o[a-3]=arguments[a];return lt.apply(void 0,[M,t,e,n].concat(o))}ot.resolve=function(){var t=ot.apply(void 0,arguments);return t[z].resolve=!0,t},ot.sync=_(ot.resolve);var Ot=function(t){return function(e){return e&&e[D]&&e[t]}},Et={take:Ot(F),put:Ot(z),all:Ot(H),race:Ot(B),call:Ot(G),cps:Ot(U),fork:Ot(q),join:Ot(W),cancel:Ot(K),select:Ot(X),actionChannel:Ot(Z),cancelled:Ot(V),flush:Ot(Y),getContext:Ot(J),setContext:Ot(Q)};n.d(e,"take",function(){return nt}),n.d(e,"takem",function(){return rt}),n.d(e,"put",function(){return ot}),n.d(e,"all",function(){return at}),n.d(e,"race",function(){return ut}),n.d(e,"call",function(){return it}),n.d(e,"apply",function(){return st}),n.d(e,"cps",function(){return ft}),n.d(e,"fork",function(){return lt}),n.d(e,"spawn",function(){return dt}),n.d(e,"join",function(){return pt}),n.d(e,"cancel",function(){return vt}),n.d(e,"select",function(){return ht}),n.d(e,"actionChannel",function(){return yt}),n.d(e,"cancelled",function(){return gt}),n.d(e,"flush",function(){return bt}),n.d(e,"getContext",function(){return mt}),n.d(e,"setContext",function(){return _t}),n.d(e,"takeEvery",function(){return xt}),n.d(e,"takeLatest",function(){return wt}),n.d(e,"throttle",function(){return Ct})},function(t,e,n){t.exports=n(113)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(3),o=n(16);t.exports=n(4)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(21));e.default=r.default||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}},function(t,e,n){var r=n(73),o=n(41);t.exports=function(t){return r(o(t))}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports={}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(28);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(107));e.default=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return(0,r.default)(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){t.exports={default:n(110),__esModule:!0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(8));e.getAccountBalances=c;var o=n(7);var a=r.default.mark(c),u=r.default.mark(s);function c(t){var e,n,u,c,s;return r.default.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,(0,o.select)(i);case 2:e=a.sent,n=t.web3,e||console.error("No accounts found while attempting to fetch balances!"),a.prev=5,a.t0=r.default.keys(e);case 7:if((a.t1=a.t0()).done){a.next=17;break}return u=a.t1.value,c=e[u],a.next=12,(0,o.call)(n.eth.getBalance,c);case 12:return s=a.sent,a.next=15,(0,o.put)({type:"ACCOUNT_BALANCE_FETCHED",account:c,accountBalance:s});case 15:a.next=7;break;case 17:a.next=25;break;case 19:return a.prev=19,a.t2=a.catch(5),a.next=23,(0,o.put)({type:"ACCOUNT_BALANCE_FAILED",error:a.t2});case 23:console.error("Error fetching account "+c+" balance:"),console.error(a.t2);case 25:return a.next=27,(0,o.put)({type:"ACCOUNT_BALANCES_FETCHED"});case 27:case"end":return a.stop()}},a,this,[[5,19]])}var i=function(t){return t.accounts};function s(){return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,o.takeLatest)("ACCOUNT_BALANCES_FETCHING",c);case 2:case"end":return t.stop()}},u,this)}e.default=s},function(e,n){e.exports=t},function(t,e,n){var r=n(3).f,o=n(9),a=n(0)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,a)&&r(t,a,{configurable:!0,value:e})}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(74),o=n(37);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e){t.exports=!0},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(80));e.default=function(t,e,n){return e in t?(0,r.default)(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(8));e.initializeWeb3=f,e.getNetworkId=l;var o=n(7);var a=r.default.mark(f),u=r.default.mark(l),c=r.default.mark(p),i=r.default.mark(v),s=n(84);function f(t){var e,n,u=t.options;return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,e={},void 0===window.web3){t.next=11;break}return(e=new s(window.web3.currentProvider)).eth.cacheSendTransaction=function(t){return(0,o.put)({type:"SEND_WEB3_TX",txObject:t,stackId:stackId,web3:e})},console.log("Injected web3 detected."),t.next=8,(0,o.put)({type:"WEB3_INITIALIZED"});case 8:return t.abrupt("return",e);case 11:if(!u.fallback){t.next=24;break}console.log("No web3 instance injected, using fallback."),t.t0=u.fallback.type,t.next="ws"===t.t0?16:23;break;case 16:return n=new s.providers.WebsocketProvider(u.fallback.url),(e=new s(n)).eth.cacheSendTransaction=function(t){return(0,o.put)({type:"SEND_WEB3_TX",txObject:t,stackId:stackId,web3:e})},t.next=21,(0,o.put)({type:"WEB3_INITIALIZED"});case 21:return t.abrupt("return",e);case 23:throw"Invalid web3 fallback provided.";case 24:throw"Cannot find injected web3 or valid fallback.";case 25:t.next=33;break;case 27:return t.prev=27,t.t1=t.catch(0),t.next=31,(0,o.put)({type:"WEB3_FAILED",error:t.t1});case 31:console.error("Error intializing web3:"),console.error(t.t1);case 33:case"end":return t.stop()}},a,this,[[0,27]])}function l(t){var e,n=t.web3;return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,(0,o.call)(n.eth.net.getId);case 3:return e=t.sent,t.next=6,(0,o.put)({type:"NETWORK_ID_FETCHED",networkId:e});case 6:return t.abrupt("return",e);case 9:return t.prev=9,t.t0=t.catch(0),t.next=13,(0,o.put)({type:"NETWORK_ID_FAILED",error:t.t0});case 13:return console.error("Error fetching network ID:"),console.error(t.t0),t.abrupt("return");case 16:case"end":return t.stop()}},u,this,[[0,9]])}function d(t){var e,n=t.txObject,r=t.stackId,o=t.web3;return eventChannel(function(t){var a=o.eth.sendTransaction(n).on("transactionHash",function(n){e=n,t({type:"W3TX_BROADCASTED",txHash:n,stackId:r})}).on("confirmation",function(n,r){t({type:"W3TX_CONFIRMAITON",confirmationReceipt:r,txHash:e})}).on("receipt",function(n){t({type:"W3TX_SUCCESSFUL",receipt:n,txHash:e}),t(END)}).on("error",function(n){t({type:"W3TX_ERROR",error:n,txHash:e}),t(END)});return function(){a.off()}})}function p(t){var e,n,a=t.txObject,u=t.stackId,i=t.web3;return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,o.call)(d,{txObject:a,stackId:u,web3:i});case 2:e=t.sent,t.prev=3;case 4:return t.next=7,take(e);case 7:return n=t.sent,t.next=10,(0,o.put)(n);case 10:t.next=4;break;case 12:return t.prev=12,e.close(),t.finish(12);case 15:case"end":return t.stop()}},c,this,[[3,,12,15]])}function v(){return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,o.takeLatest)("NETWORK_ID_FETCHING",l);case 2:return t.next=4,(0,o.takeEvery)("SEND_WEB3_TX",p);case 4:case"end":return t.stop()}},i,this)}e.default=v},function(t,e,n){var r=n(1),o=n(2),a=n(27),u=n(32),c=n(3).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=a?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||c(e,t,{value:u.f(t)})}},function(t,e,n){e.f=n(0)},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(8));e.getAccounts=l;var o=n(23),a=n(7),u=n(22);var c=r.default.mark(l),i=r.default.mark(d),s=r.default.mark(p),f=r.default.mark(v);function l(t){var e,n;return r.default.wrap(function(r){for(;;)switch(r.prev=r.next){case 0:return e=t.web3,r.prev=1,r.next=4,(0,a.call)(e.eth.getAccounts);case 4:if(n=r.sent){r.next=7;break}throw"No accounts found!";case 7:return r.next=9,(0,a.put)({type:"ACCOUNTS_FETCHED",accounts:n});case 9:r.next=17;break;case 11:return r.prev=11,r.t0=r.catch(1),r.next=15,(0,a.put)({type:"ACCOUNTS_FAILED",error:r.t0});case 15:console.error("Error fetching accounts:"),console.error(r.t0);case 17:case"end":return r.stop()}},c,this,[[1,11]])}function d(t){var e=t.interval,n=t.web3;return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",(0,o.eventChannel)(function(t){var r=n,o=setInterval(function(){t({type:"SYNCING_ACCOUNTS",persistedWeb3:r})},e);return function(){clearInterval(o)}}));case 1:case"end":return t.stop()}},i,this)}function p(t){var e,n,o=t.interval,c=t.web3;return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,a.call)(d,{interval:o,web3:c});case 2:e=t.sent,t.prev=3;case 4:return t.next=7,(0,a.take)(e);case 7:if("SYNCING_ACCOUNTS"!==(n=t.sent).type){t.next=13;break}return t.next=11,(0,a.call)(l,{web3:n.persistedWeb3});case 11:return t.next=13,(0,a.call)(u.getAccountBalances,{web3:n.persistedWeb3});case 13:return t.next=15,(0,a.put)(n);case 15:t.next=4;break;case 17:return t.prev=17,e.close(),t.finish(17);case 20:case"end":return t.stop()}},s,this,[[3,,17,20]])}function v(){return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,a.takeLatest)("ACCOUNTS_FETCHING",l);case 2:return t.next=4,(0,a.takeLatest)("ACCOUNTS_POLLING",p);case 4:case"end":return t.stop()}},f,this)}e.default=v},function(t,e,n){"use strict";var r=n(28);t.exports.f=function(t){return new function(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}(t)}},function(t,e,n){var r=n(41);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(1),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});t.exports=function(t){return o[t]||(o[t]={})}},function(t,e,n){var r=n(38)("keys"),o=n(25);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e,n){var r=n(42),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){"use strict";var r=n(133)(!0);n(77)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){var r=n(10);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(10),o=n(1).document,a=r(o)&&r(o.createElement);t.exports=function(t){return a?o.createElement(t):{}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.generateContractsInitialState=function(t){for(var e={},n=0;n<t.contracts.length;n++){var o=t.contracts[n].contractName;e[o]=(0,r.generateContractInitialState)(t.contracts[n])}return e};var r=n(52)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(12));var o={status:""};e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o,e=arguments[1];return"WEB3_INITIALIZING"===e.type?(0,r.default)({},t,{status:"initializing"}):"WEB3_INITIALIZED"===e.type?(0,r.default)({},t,{status:"initialized"}):"WEB3_FAILED"===e.type?(0,r.default)({},t,{status:"failed"}):"NETWORK_ID_FETCHED"===e.type?(0,r.default)({},t,{networkId:e.networkId}):"NETWORK_ID_FAILED"===e.type?(0,r.default)({},t,{networkId:e.networkId}):t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(19));var o=[];e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o,e=arguments[1];return"PUSH_TO_TXSTACK"===e.type?(t.push(""),[].concat((0,r.default)(t))):"POP_FROM_TXSTACK"===e.type?(t.pop(),[].concat((0,r.default)(t))):"TX_BROADCASTED"===e.type?(t[e.stackId]=e.txHash,[].concat((0,r.default)(t))):t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=u(n(19)),o=u(n(29)),a=u(n(12));function u(t){return t&&t.__esModule?t:{default:t}}var c={};e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:c,e=arguments[1];return"TX_BROADCASTED"===e.type?(0,a.default)({},t,(0,o.default)({},e.txHash,{status:"pending",confirmations:[]})):"TX_CONFIRMAITON"===e.type?(0,a.default)({},t,(0,o.default)({},e.txHash,(0,a.default)({},t[e.txHash],{confirmations:[].concat((0,r.default)(t[e.txHash].confirmations),[e.confirmationReceipt])}))):"TX_SUCCESSFUL"===e.type?(0,a.default)({},t,(0,o.default)({},e.txHash,(0,a.default)({},t[e.txHash],{status:"success",receipt:e.receipt}))):"TX_ERROR"===e.type?(0,a.default)({},t,(0,o.default)({},e.txHash,(0,a.default)({},t[e.txHash],{status:"error",error:e.error}))):t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(12));var o={initialized:!1};e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o;return"DRIZZLE_INITIALIZED"===arguments[1].type?(0,r.default)({},t,{initialized:!0}):t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return t.web3Contract?t.web3Contract.options.jsonInterface:t.abi}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.generateContractInitialState=function(t){for(var e={initialized:!1,synced:!1},n=(0,r.default)(t),o=0;o<n.length;o++){var a=n[o];"function"==a.type&&!0===a.constant&&(e[a.name]={})}return e};var r=function(t){return t&&t.__esModule?t:{default:t}}(n(51))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=c(n(19)),o=c(n(29)),a=c(n(12)),u=n(52);function c(t){return t&&t.__esModule?t:{default:t}}var i={};e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i,e=arguments[1];if("CONTRACT_INITIALIZING"===e.type)return(0,a.default)({},t,(0,o.default)({},e.contractConfig.contractName,(0,u.generateContractInitialState)(e.contractConfig)));if("CONTRACT_INITIALIZED"===e.type)return(0,a.default)({},t,(0,o.default)({},e.name,(0,a.default)({},t[e.name],{initialized:!0,synced:!0,events:[]})));if("CONTRACT_SYNCING"===e.type){var n=e.contract.contractName;return(0,a.default)({},t,(0,o.default)({},n,(0,a.default)({},t[n],{synced:!1})))}return"CONTRACT_SYNCED"===e.type?(0,a.default)({},t,(0,o.default)({},e.contractName,(0,a.default)({},t[e.contractName],{synced:!0}))):"CONTRACT_SYNC_IND"===e.type?(0,a.default)({},t,(0,o.default)({},e.contractName,(0,a.default)({},t[e.contractName],{synced:!1}))):"GOT_CONTRACT_VAR"===e.type?(0,a.default)({},t,(0,o.default)({},e.name,(0,a.default)({},t[e.name],(0,o.default)({},e.variable,(0,a.default)({},t[e.name][e.variable],(0,o.default)({},e.argsHash,(0,a.default)({},t[e.name][e.variable][e.argsHash],{args:e.args,fnIndex:e.fnIndex,value:e.value}))))))):"ERROR_CONTRACT_VAR"===e.type?(0,a.default)({},t,(0,o.default)({},e.name,(0,a.default)({},t[e.name],(0,o.default)({},e.variable,(0,a.default)({},t[e.name][e.variable],(0,o.default)({},e.argsHash,(0,a.default)({},t[e.name][e.variable][e.argsHash],{args:e.args,fnIndex:e.fnIndex,error:e.error}))))))):"EVENT_FIRED"===e.type?(0,a.default)({},t,(0,o.default)({},e.name,(0,a.default)({},t[e.name],{events:[].concat((0,r.default)(t[e.name].events),[e.event])}))):t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=a(n(29)),o=a(n(12));function a(t){return t&&t.__esModule?t:{default:t}}var u={};e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u,e=arguments[1];return"ACCOUNT_BALANCE_FETCHED"===e.type?(0,o.default)({},t,(0,r.default)({},e.account,e.accountBalance)):t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(21));var o={};e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:o,e=arguments[1];return"ACCOUNTS_FETCHING"===e.type?t:"ACCOUNTS_FETCHED"===e.type?(0,r.default)({},t,e.accounts):t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=f(n(8)),o=n(7),a=f(n(88)),u=f(n(87)),c=n(30),i=n(34),s=n(22);function f(t){return t&&t.__esModule?t:{default:t}}var l=r.default.mark(p),d=r.default.mark(v);function p(t){var e,n,f,d,p,v,h,y,g,b;return r.default.wrap(function(r){for(;;)switch(r.prev=r.next){case 0:return r.prev=0,e=(0,u.default)(a.default,t.options),n=e.web3,f=t.drizzle,r.next=6,(0,o.call)(c.initializeWeb3,{options:n});case 6:return d=r.sent,f.web3=d,r.next=10,(0,o.call)(c.getNetworkId,{web3:d});case 10:return r.next=12,(0,o.call)(i.getAccounts,{web3:d});case 12:return r.next=14,(0,o.call)(s.getAccountBalances,{web3:d});case 14:p=0;case 15:if(!(p<e.contracts.length)){r.next=25;break}return v=e.contracts[p],h=[],(y=v.contractName)in e.events&&(h=e.events[y]),r.next=22,(0,o.put)({type:"ADD_CONTRACT",drizzle:f,contractConfig:v,events:h,web3:d});case 22:p++,r.next=15;break;case 25:if(g=e.syncAlways,!d.currentProvider.isMetaMask){r.next=32;break}return b=e.polls.blocks,r.next=30,(0,o.put)({type:"BLOCKS_POLLING",drizzle:f,interval:b,web3:d,syncAlways:g});case 30:r.next=34;break;case 32:return r.next=34,(0,o.put)({type:"BLOCKS_LISTENING",drizzle:f,web3:d,syncAlways:g});case 34:if(!("accounts"in e.polls)){r.next=37;break}return r.next=37,(0,o.put)({type:"ACCOUNTS_POLLING",interval:e.polls.accounts,web3:d});case 37:r.next=46;break;case 39:return r.prev=39,r.t0=r.catch(0),r.next=43,(0,o.put)({type:"DRIZZLE_FAILED",error:r.t0});case 43:return console.error("Error initializing Drizzle:"),console.error(r.t0),r.abrupt("return");case 46:return r.next=48,(0,o.put)({type:"DRIZZLE_INITIALIZED"});case 48:return r.abrupt("return");case 49:case"end":return r.stop()}},l,this,[[0,39]])}function v(){return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,o.takeLatest)("DRIZZLE_INITIALIZING",p);case 2:case"end":return t.stop()}},d,this)}e.default=v},function(t,e,n){var r=n(74),o=n(37).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){"use strict";e.__esModule=!0;var r=u(n(103)),o=u(n(101)),a="function"==typeof o.default&&"symbol"==typeof r.default?function(t){return typeof t}:function(t){return t&&"function"==typeof o.default&&t.constructor===o.default&&t!==o.default.prototype?"symbol":typeof t};function u(t){return t&&t.__esModule?t:{default:t}}e.default="function"==typeof o.default&&"symbol"===a(r.default)?function(t){return void 0===t?"undefined":a(t)}:function(t){return t&&"function"==typeof o.default&&t.constructor===o.default&&t!==o.default.prototype?"symbol":void 0===t?"undefined":a(t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=l(n(21)),o=l(n(12)),a=l(n(19)),u=l(n(58)),c=l(n(8));e.addContract=_,e.instantiateWeb3Contract=x,e.instantiateContract=w;var i=n(23),s=n(7),f=l(n(91));function l(t){return t&&t.__esModule?t:{default:t}}var d=c.default.mark(_),p=c.default.mark(x),v=c.default.mark(w),h=c.default.mark(O),y=c.default.mark(k),g=c.default.mark(N),b=c.default.mark(T),m=c.default.mark(L);function _(t){var e,n=t.drizzle,r=t.contractConfig,o=t.events,a=t.web3;return c.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!n.loadingContract[r.contractName]){t.next=2;break}return t.abrupt("return",!1);case 2:return n.loadingContract[r.contractName]=!0,t.next=5,(0,s.put)({type:"CONTRACT_INITIALIZING",contractConfig:r});case 5:if(e=void 0,!r.web3Contract){t.next=12;break}return t.next=9,(0,s.call)(x,{web3Contract:r.web3Contract,name:r.contractName,events:o,store:n.store,web3:a});case 9:e=t.sent,t.next=15;break;case 12:return t.next=14,(0,s.call)(w,{contractArtifact:r,events:o,store:n.store,web3:a});case 14:e=t.sent;case 15:return n._addContract(e),t.next=18,(0,s.put)({type:"CONTRACT_INITIALIZED",name:r.contractName});case 18:case"end":return t.stop()}},d,this)}function x(t){var e=t.web3Contract,n=t.name,r=t.events,o=t.store,a=t.web3;return c.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new f.default(e,a,n,o,r));case 1:case"end":return t.stop()}},p,this)}function w(t){var e,n,r=t.contractArtifact,o=t.events,a=t.store,u=t.web3;return c.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,s.select)(A);case 2:return e=t.sent,n=new u.eth.Contract(r.abi,r.networks[e].address,{from:a.getState().accounts[0],data:r.deployedBytecode}),t.abrupt("return",new f.default(n,u,r.contractName,a,o,r));case 5:case"end":return t.stop()}},v,this)}function C(t){var e=t.contract,n=t.eventName,r=t.eventOptions,o=e.contractName;return(0,i.eventChannel)(function(t){var a=e.events[n](r).on("data",function(e){t({type:"EVENT_FIRED",name:o,event:e})}).on("changed",function(e){t({type:"EVENT_CHANGED",name:o,event:e})}).on("error",function(e){t({type:"EVENT_ERROR",name:o,error:e}),t(i.END)});return function(){a.removeListener(n)}})}function O(t){var e,n,r=t.contract,o=t.eventName,a=t.eventOptions;return c.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,s.call)(C,{contract:r,eventName:o,eventOptions:a});case 2:e=t.sent;case 3:return t.next=6,(0,s.take)(e);case 6:return n=t.sent,t.next=9,(0,s.put)(n);case 9:t.next=3;break;case 11:case"end":return t.stop()}},h,this)}function E(t){var e,n=t.txObject,r=t.stackId,o=t.sendArgs,a=void 0===o?{}:o,u=t.contractName;return(0,i.eventChannel)(function(t){var o=n.send(a).on("transactionHash",function(n){e=n,t({type:"TX_BROADCASTED",txHash:n,stackId:r}),t({type:"CONTRACT_SYNC_IND",contractName:u})}).on("confirmation",function(n,r){t({type:"TX_CONFIRMAITON",confirmationReceipt:r,txHash:e})}).on("receipt",function(n){t({type:"TX_SUCCESSFUL",receipt:n,txHash:e}),t(i.END)}).on("error",function(n){t({type:"TX_ERROR",error:n,txHash:e}),t(i.END)});return function(){o.off()}})}function k(t){var e,n,r,o,i,f,l,d=t.contract,p=t.fnName,v=(t.fnIndex,t.args),h=t.stackId;return c.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return v.length&&(e=v.length>1?v[v.length-1]:v[0],n={},r=!1,"object"===(void 0===e?"undefined":(0,u.default)(e))&&(r=(0,s.call)(I,e)),r&&(n=e,v.length>1?delete v[v.length-1]:delete v[0],v.length=v.length-1)),o=d.contractName,t.next=4,s.call.apply(void 0,[d.methods[p]].concat((0,a.default)(v)));case 4:return i=t.sent,t.next=7,(0,s.call)(E,{txObject:i,stackId:h,sendArgs:n,contractName:o});case 7:f=t.sent,t.prev=8;case 9:return t.next=12,(0,s.take)(f);case 12:return l=t.sent,t.next=15,(0,s.put)(l);case 15:t.next=9;break;case 17:return t.prev=17,f.close(),t.finish(17);case 20:case"end":return t.stop()}},y,this,[[8,,17,20]])}function N(t){var e,n,r,i,f,l,d,p=t.contract,v=t.fnName,h=t.fnIndex,y=t.args,b=t.argsHash,m=t.sync,_=void 0!==m&&m;return c.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!_){t.next=2;break}return t.abrupt("return");case 2:return y.length&&(e=y.length>1?y[y.length-1]:y[0],n={},r=!1,"object"===(void 0===e?"undefined":(0,u.default)(e))&&(r=(0,s.call)(I,e)),r&&(n=e,y.length>1?delete y[y.length-1]:delete y[0],y.length=y.length-1)),t.next=5,s.call.apply(void 0,[p.methods[v]].concat((0,a.default)(y)));case 5:return i=t.sent,t.prev=6,t.next=9,(0,s.call)(i.call,n);case 9:return f=t.sent,l={name:p.contractName,variable:p.abi[h].name,argsHash:b,args:y,value:f,fnIndex:h},t.next=13,(0,s.put)((0,o.default)({type:"GOT_CONTRACT_VAR"},l));case 13:t.next=21;break;case 15:return t.prev=15,t.t0=t.catch(6),console.error(t.t0),d={name:p.contractName,variable:p.abi[h].name,argsHash:b,args:y,error:t.t0,fnIndex:h},t.next=21,(0,s.put)((0,o.default)({type:"ERROR_CONTRACT_VAR"},d));case 21:case"end":return t.stop()}},g,this,[[6,15]])}function T(t){var e,n,o,a,u,i,f,l;return c.default.wrap(function(d){for(;;)switch(d.prev=d.next){case 0:return e=t.contract,n=e.contractName,d.next=4,(0,s.select)(S);case 4:o=d.sent,delete(a=(0,r.default)({},o[n])).initialized,delete a.synced,delete a.events,d.t0=c.default.keys(a);case 10:if((d.t1=d.t0()).done){d.next=25;break}u=d.t1.value,d.t2=c.default.keys(a[u]);case 13:if((d.t3=d.t2()).done){d.next=23;break}return i=d.t3.value,f=a[u][i].fnIndex,l=a[u][i].args,d.next=19,(0,s.put)({type:"CALL_CONTRACT_FN",contract:e,fnName:u,fnIndex:f,args:l,argsHash:i,sync:!0});case 19:return d.next=21,(0,s.call)(N,{contract:e,fnName:u,fnIndex:f,args:l,argsHash:i});case 21:d.next=13;break;case 23:d.next=10;break;case 25:return d.next=27,(0,s.put)({type:"CONTRACT_SYNCED",contractName:n});case 27:case"end":return d.stop()}},b,this)}var S=function(t){return t.contracts},A=function(t){return t.web3.networkId};function I(t){return"from"in t||("gas"in t||("gasPrice"in t||"value"in t))}function L(){return c.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,s.takeEvery)("SEND_CONTRACT_TX",k);case 2:return t.next=4,(0,s.takeEvery)("CALL_CONTRACT_FN",N);case 4:return t.next=6,(0,s.takeEvery)("CONTRACT_SYNCING",T);case 6:return t.next=8,(0,s.takeEvery)("LISTEN_FOR_EVENT",O);case 8:return t.next=10,(0,s.takeEvery)("ADD_CONTRACT",_);case 10:case"end":return t.stop()}},m,this)}e.default=L},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n(8)),o=n(23),a=n(7);var u=r.default.mark(p),c=r.default.mark(h),i=r.default.mark(y),s=r.default.mark(g),f=r.default.mark(b),l=n(111);function d(t){var e=t.drizzle,n=t.web3,r=t.syncAlways;return(0,o.eventChannel)(function(t){var a=n.eth.subscribe("newBlockHeaders",function(e,n){e&&(t({type:"BLOCKS_FAILED",error:e}),console.error("Error in block header subscription:"),console.error(e),t(o.END))}).on("data",function(o){t({type:"BLOCK_RECEIVED",blockHeader:o,drizzle:e,web3:n,syncAlways:r})}).on("error",function(e){t({type:"BLOCKS_FAILED",error:e}),t(o.END)});return function(){a.off()}})}function p(t){var e,n,o=t.drizzle,c=t.web3;t.syncAlways;return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,a.call)(d,{drizzle:o,web3:c});case 2:e=t.sent,t.prev=3;case 4:return t.next=7,(0,a.take)(e);case 7:return n=t.sent,t.next=10,(0,a.put)(n);case 10:t.next=4;break;case 12:return t.prev=12,e.close(),t.finish(12);case 15:case"end":return t.stop()}},u,this,[[3,,12,15]])}function v(t){var e=t.drizzle,n=t.interval,r=t.web3,a=t.syncAlways;return(0,o.eventChannel)(function(t){var u=new l({provider:r.currentProvider,pollingInterval:n});u.on("latest",function(n){t({type:"BLOCK_FOUND",block:n,drizzle:e,web3:r,syncAlways:a})}),u.start().catch(function(e){t({type:"BLOCKS_FAILED",error:e}),t(o.END)});return function(){u.stop()}})}function h(t){var e,n,o=t.drizzle,u=t.interval,i=t.web3;t.syncAlways;return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,a.call)(v,{drizzle:o,interval:u,web3:i});case 2:e=t.sent,t.prev=3;case 4:return t.next=7,(0,a.take)(e);case 7:return n=t.sent,t.next=10,(0,a.put)(n);case 10:t.next=4;break;case 12:return t.prev=12,e.close(),t.finish(12);case 15:case"end":return t.stop()}},c,this,[[3,,12,15]])}function y(t){var e,n,o=t.blockHeader,u=t.drizzle,c=t.web3,s=t.syncAlways;return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e=o.number,t.prev=1,t.next=4,(0,a.call)(c.eth.getBlock,e,!0);case 4:return n=t.sent,t.next=7,(0,a.call)(g,{block:n,drizzle:u,web3:c,syncAlways:s});case 7:t.next=16;break;case 9:return t.prev=9,t.t0=t.catch(1),console.error("Error in block processing:"),console.error(t.t0),t.next=15,(0,a.put)({type:"BLOCK_FAILED",error:t.t0});case 15:return t.abrupt("return");case 16:case"end":return t.stop()}},i,this,[[1,9]])}function g(t){var e,n,o,u,c,i,f=t.block,l=t.drizzle,d=(t.web3,t.syncAlways);return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,!d){t.next=5;break}return t.next=4,all(l.contracts.map(function(t){(0,a.put)({type:"CONTRACT_SYNCING",contract:t})}));case 4:return t.abrupt("return");case 5:if(!((e=f.transactions).length>0)){t.next=22;break}n=0;case 8:if(!(n<e.length)){t.next=22;break}if(o=e[n].from||"",!(u=l.findContractByAddress(o.toLowerCase()))){t.next=14;break}return t.next=14,(0,a.put)({type:"CONTRACT_SYNCING",contract:u});case 14:if(c=e[n].to||"",!(i=l.findContractByAddress(c.toLowerCase()))){t.next=19;break}return t.next=19,(0,a.put)({type:"CONTRACT_SYNCING",contract:i});case 19:n++,t.next=8;break;case 22:t.next=31;break;case 24:return t.prev=24,t.t0=t.catch(0),console.error("Error in block processing:"),console.error(t.t0),t.next=30,(0,a.put)({type:"BLOCK_FAILED",error:t.t0});case 30:return t.abrupt("return");case 31:case"end":return t.stop()}},s,this,[[0,24]])}function b(){return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,a.takeLatest)("BLOCKS_LISTENING",p);case 2:return t.next=4,(0,a.takeEvery)("BLOCK_RECEIVED",y);case 4:return t.next=6,(0,a.takeLatest)("BLOCKS_POLLING",h);case 6:return t.next=8,(0,a.takeEvery)("BLOCK_FOUND",g);case 8:case"end":return t.stop()}},f,this)}e.default=b},function(t,n){t.exports=e},function(t,e,n){var r=n(0)("iterator"),o=!1;try{var a=[7][r]();a.return=function(){o=!0},Array.from(a,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var a=[7],u=a[r]();u.next=function(){return{done:n=!0}},a[r]=function(){return u},t(a)}catch(t){}return n}},function(t,e,n){var r=n(5),o=n(10),a=n(35);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=a.f(t);return(0,n.resolve)(e),n.promise}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){var r,o,a,u=n(18),c=n(121),i=n(72),s=n(45),f=n(1),l=f.process,d=f.setImmediate,p=f.clearImmediate,v=f.MessageChannel,h=f.Dispatch,y=0,g={},b=function(){var t=+this;if(g.hasOwnProperty(t)){var e=g[t];delete g[t],e()}},m=function(t){b.call(t.data)};d&&p||(d=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return g[++y]=function(){c("function"==typeof t?t:Function(t),e)},r(y),y},p=function(t){delete g[t]},"process"==n(14)(l)?r=function(t){l.nextTick(u(b,t,1))}:h&&h.now?r=function(t){h.now(u(b,t,1))}:v?(a=(o=new v).port2,o.port1.onmessage=m,r=u(a.postMessage,a,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",m,!1)):r="onreadystatechange"in s("script")?function(t){i.appendChild(s("script")).onreadystatechange=function(){i.removeChild(this),b.call(t)}}:function(t){setTimeout(u(b,t,1),0)}),t.exports={set:d,clear:p}},function(t,e,n){var r=n(5),o=n(28),a=n(0)("species");t.exports=function(t,e){var n,u=r(t).constructor;return void 0===u||void 0==(n=r(u)[a])?e:o(n)}},function(t,e,n){var r=n(70),o=n(0)("iterator"),a=n(15);t.exports=n(2).getIteratorMethod=function(t){if(void 0!=t)return t[o]||t["@@iterator"]||a[r(t)]}},function(t,e,n){var r=n(15),o=n(0)("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||a[o]===t)}},function(t,e,n){var r=n(5);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var a=t.return;throw void 0!==a&&r(a.call(t)),e}}},function(t,e,n){var r=n(14),o=n(0)("toStringTag"),a="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:a?r(e):"Object"==(u=r(e))&&"function"==typeof e.callee?"Arguments":u}},function(t,e,n){n(127);for(var r=n(1),o=n(11),a=n(15),u=n(0)("toStringTag"),c="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),i=0;i<c.length;i++){var s=c[i],f=r[s],l=f&&f.prototype;l&&!l[u]&&o(l,u,s),a[s]=a.Array}},function(t,e,n){var r=n(1).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(14);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){var r=n(9),o=n(13),a=n(130)(!1),u=n(39)("IE_PROTO");t.exports=function(t,e){var n,c=o(t),i=0,s=[];for(n in c)n!=u&&r(c,n)&&s.push(n);for(;e.length>i;)r(c,n=e[i++])&&(~a(s,n)||s.push(n));return s}},function(t,e,n){var r=n(5),o=n(131),a=n(37),u=n(39)("IE_PROTO"),c=function(){},i=function(){var t,e=n(45)("iframe"),r=a.length;for(e.style.display="none",n(72).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),i=t.F;r--;)delete i.prototype[a[r]];return i()};t.exports=Object.create||function(t,e){var n;return null!==t?(c.prototype=r(t),n=new c,c.prototype=null,n[u]=t):n=i(),void 0===e?n:o(n,e)}},function(t,e,n){t.exports=n(11)},function(t,e,n){"use strict";var r=n(27),o=n(6),a=n(76),u=n(11),c=n(9),i=n(15),s=n(132),f=n(24),l=n(128),d=n(0)("iterator"),p=!([].keys&&"next"in[].keys()),v=function(){return this};t.exports=function(t,e,n,h,y,g,b){s(n,e,h);var m,_,x,w=function(t){if(!p&&t in k)return k[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},C=e+" Iterator",O="values"==y,E=!1,k=t.prototype,N=k[d]||k["@@iterator"]||y&&k[y],T=!p&&N||w(y),S=y?O?w("entries"):T:void 0,A="Array"==e&&k.entries||N;if(A&&(x=l(A.call(new t)))!==Object.prototype&&x.next&&(f(x,C,!0),r||c(x,d)||u(x,d,v)),O&&N&&"values"!==N.name&&(E=!0,T=function(){return N.call(this)}),r&&!b||!p&&!E&&k[d]||u(k,d,T),i[e]=T,i[C]=v,y)if(m={values:O?T:w("values"),keys:g?T:w("keys"),entries:S},b)for(_ in m)_ in k||a(k,_,m[_]);else o(o.P+o.F*(p||E),e,m);return m}},function(t,e){},function(t,e,n){t.exports=!n(4)&&!n(17)(function(){return 7!=Object.defineProperty(n(45)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){t.exports={default:n(137),__esModule:!0}},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(80));e.default=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),(0,r.default)(t,o.key,o)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}()},function(t,e,n){"use strict";e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(61),o=l(n(55)),a=l(n(54)),u=l(n(53)),c=l(n(50)),i=l(n(49)),s=l(n(48)),f=l(n(47));function l(t){return t&&t.__esModule?t:{default:t}}var d=(0,r.combineReducers)({accounts:o.default,accountBalances:a.default,contracts:u.default,drizzleStatus:c.default,transactions:i.default,transactionStack:s.default,web3:f.default});e.default=d},function(t,e){t.exports=n},function(t,e){t.exports=r},function(t,e){t.exports=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){return(0,r.default)(t,e,{isMergeableObject:o})};var r=function(t){return t&&t.__esModule?t:{default:t}}(n(86));var o=n(85)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default={web3:{block:!1,fallback:{type:"ws",url:"ws://127.0.0.1:8545"}},contracts:[],events:{},polls:{blocks:3e3},syncAlways:!1}},function(t,e,n){var r=n(2),o=r.JSON||(r.JSON={stringify:JSON.stringify});t.exports=function(t){return o.stringify.apply(o,arguments)}},function(t,e,n){t.exports={default:n(89),__esModule:!0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=i(n(90)),o=i(n(58)),a=i(n(21)),u=i(n(82)),c=i(n(81));function i(t){return t&&t.__esModule?t:{default:t}}var s=function(){function t(e,n,r,c){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};(0,u.default)(this,t),this.abi=e.options.jsonInterface,this.address=e.options.address,this.web3=n,this.contractName=r,this.contractArtifact=s,this.store=c,(0,a.default)(this,e);for(var f=0;f<this.abi.length;f++){var l=this.abi[f];"function"==l.type&&!0===l.constant&&(this.methods[l.name].cacheCall=this.cacheCallFunction(l.name,f)),"function"==l.type&&!1===l.constant&&(this.methods[l.name].cacheSend=this.cacheSendFunction(l.name,f))}if(i.length>0)for(f=0;f<i.length;f++){var d=i[f];"object"===(void 0===d?"undefined":(0,o.default)(d))?c.dispatch({type:"LISTEN_FOR_EVENT",contract:this,eventName:d.eventName,eventOptions:d.eventOptions}):c.dispatch({type:"LISTEN_FOR_EVENT",contract:this,eventName:d})}}return(0,c.default)(t,[{key:"cacheCallFunction",value:function(t,e,n){var r=this;return function(){var n="0x0",o=arguments;o.length>0&&(n=r.generateArgsHash(o));var a=r.contractName;return n in r.store.getState().contracts[a][t]&&!0===r.store.getState().contracts[a].synced?n:(r.store.dispatch({type:"CALL_CONTRACT_FN",contract:r,fnName:t,fnIndex:e,args:o,argsHash:n}),n)}}},{key:"cacheSendFunction",value:function(t,e,n){var r=this;return function(){var n=arguments,o=r.store.getState().transactionStack.length;return r.store.dispatch({type:"PUSH_TO_STACK"}),r.store.dispatch({type:"SEND_CONTRACT_TX",contract:r,fnName:t,fnIndex:e,args:n,stackId:o}),o}}},{key:"generateArgsHash",value:function(t){for(var e=this.web3,n="",a=0;a<t.length;a++)if("function"!=typeof t[a]){var u=t[a];if("object"===(void 0===u?"undefined":(0,o.default)(u))&&(u=(0,r.default)(u)),"number"==typeof u&&(u=u.toString()),"utils"in e)var c=e.utils.sha3(u);else c=e.sha3(u);n+=c}return e.utils.sha3(n)}}]),t}();e.default=s},function(t,e,n){n(31)("observable")},function(t,e,n){n(31)("asyncIterator")},function(t,e,n){var r=n(20),o=n(16),a=n(13),u=n(44),c=n(9),i=n(79),s=Object.getOwnPropertyDescriptor;e.f=n(4)?s:function(t,e){if(t=a(t),e=u(e,!0),i)try{return s(t,e)}catch(t){}if(c(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e,n){var r=n(13),o=n(57).f,a={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==a.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(r(t))}},function(t,e,n){var r=n(14);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(26),o=n(33),a=n(20);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var u,c=n(t),i=a.f,s=0;c.length>s;)i.call(t,u=c[s++])&&e.push(u);return e}},function(t,e,n){var r=n(25)("meta"),o=n(10),a=n(9),u=n(3).f,c=0,i=Object.isExtensible||function(){return!0},s=!n(17)(function(){return i(Object.preventExtensions({}))}),f=function(t){u(t,r,{value:{i:"O"+ ++c,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!a(t,r)){if(!i(t))return"F";if(!e)return"E";f(t)}return t[r].i},getWeak:function(t,e){if(!a(t,r)){if(!i(t))return!0;if(!e)return!1;f(t)}return t[r].w},onFreeze:function(t){return s&&l.NEED&&i(t)&&!a(t,r)&&f(t),t}}},function(t,e,n){"use strict";var r=n(1),o=n(9),a=n(4),u=n(6),c=n(76),i=n(98).KEY,s=n(17),f=n(38),l=n(24),d=n(25),p=n(0),v=n(32),h=n(31),y=n(97),g=n(96),b=n(5),m=n(10),_=n(13),x=n(44),w=n(16),C=n(75),O=n(95),E=n(94),k=n(3),N=n(26),T=E.f,S=k.f,A=O.f,I=r.Symbol,L=r.JSON,j=L&&L.stringify,P=p("_hidden"),R=p("toPrimitive"),M={}.propertyIsEnumerable,D=f("symbol-registry"),F=f("symbols"),z=f("op-symbols"),H=Object.prototype,B="function"==typeof I,G=r.QObject,U=!G||!G.prototype||!G.prototype.findChild,q=a&&s(function(){return 7!=C(S({},"a",{get:function(){return S(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=T(H,e);r&&delete H[e],S(t,e,n),r&&t!==H&&S(H,e,r)}:S,W=function(t){var e=F[t]=C(I.prototype);return e._k=t,e},K=B&&"symbol"==typeof I.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof I},X=function(t,e,n){return t===H&&X(z,e,n),b(t),e=x(e,!0),b(n),o(F,e)?(n.enumerable?(o(t,P)&&t[P][e]&&(t[P][e]=!1),n=C(n,{enumerable:w(0,!1)})):(o(t,P)||S(t,P,w(1,{})),t[P][e]=!0),q(t,e,n)):S(t,e,n)},Z=function(t,e){b(t);for(var n,r=y(e=_(e)),o=0,a=r.length;a>o;)X(t,n=r[o++],e[n]);return t},V=function(t){var e=M.call(this,t=x(t,!0));return!(this===H&&o(F,t)&&!o(z,t))&&(!(e||!o(this,t)||!o(F,t)||o(this,P)&&this[P][t])||e)},Y=function(t,e){if(t=_(t),e=x(e,!0),t!==H||!o(F,e)||o(z,e)){var n=T(t,e);return!n||!o(F,e)||o(t,P)&&t[P][e]||(n.enumerable=!0),n}},J=function(t){for(var e,n=A(_(t)),r=[],a=0;n.length>a;)o(F,e=n[a++])||e==P||e==i||r.push(e);return r},Q=function(t){for(var e,n=t===H,r=A(n?z:_(t)),a=[],u=0;r.length>u;)!o(F,e=r[u++])||n&&!o(H,e)||a.push(F[e]);return a};B||(c((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var t=d(arguments.length>0?arguments[0]:void 0),e=function(n){this===H&&e.call(z,n),o(this,P)&&o(this[P],t)&&(this[P][t]=!1),q(this,t,w(1,n))};return a&&U&&q(H,t,{configurable:!0,set:e}),W(t)}).prototype,"toString",function(){return this._k}),E.f=Y,k.f=X,n(57).f=O.f=J,n(20).f=V,n(33).f=Q,a&&!n(27)&&c(H,"propertyIsEnumerable",V,!0),v.f=function(t){return W(p(t))}),u(u.G+u.W+u.F*!B,{Symbol:I});for(var $="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;$.length>tt;)p($[tt++]);for(var et=N(p.store),nt=0;et.length>nt;)h(et[nt++]);u(u.S+u.F*!B,"Symbol",{for:function(t){return o(D,t+="")?D[t]:D[t]=I(t)},keyFor:function(t){if(!K(t))throw TypeError(t+" is not a symbol!");for(var e in D)if(D[e]===t)return e},useSetter:function(){U=!0},useSimple:function(){U=!1}}),u(u.S+u.F*!B,"Object",{create:function(t,e){return void 0===e?C(t):Z(C(t),e)},defineProperty:X,defineProperties:Z,getOwnPropertyDescriptor:Y,getOwnPropertyNames:J,getOwnPropertySymbols:Q}),L&&u(u.S+u.F*(!B||s(function(){var t=I();return"[null]"!=j([t])||"{}"!=j({a:t})||"{}"!=j(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(m(e)||void 0!==t)&&!K(t))return g(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!K(e))return e}),r[1]=e,j.apply(L,r)}}),I.prototype[R]||n(11)(I.prototype,R,I.prototype.valueOf),l(I,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,e,n){n(99),n(78),n(93),n(92),t.exports=n(2).Symbol},function(t,e,n){t.exports={default:n(100),__esModule:!0}},function(t,e,n){n(43),n(71),t.exports=n(32).f("iterator")},function(t,e,n){t.exports={default:n(102),__esModule:!0}},function(t,e,n){"use strict";var r=n(3),o=n(16);t.exports=function(t,e,n){e in t?r.f(t,e,o(0,n)):t[e]=n}},function(t,e,n){"use strict";var r=n(18),o=n(6),a=n(36),u=n(69),c=n(68),i=n(40),s=n(104),f=n(67);o(o.S+o.F*!n(62)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,o,l,d=a(t),p="function"==typeof this?this:Array,v=arguments.length,h=v>1?arguments[1]:void 0,y=void 0!==h,g=0,b=f(d);if(y&&(h=r(h,v>2?arguments[2]:void 0,2)),void 0==b||p==Array&&c(b))for(n=new p(e=i(d.length));e>g;g++)s(n,g,y?h(d[g],g):d[g]);else for(l=b.call(d),n=new p;!(o=l.next()).done;g++)s(n,g,y?u(l,h,[o.value,g],!0):o.value);return n.length=g,n}})},function(t,e,n){n(43),n(105),t.exports=n(2).Array.from},function(t,e,n){t.exports={default:n(106),__esModule:!0}},function(t,e,n){"use strict";var r=n(26),o=n(33),a=n(20),u=n(36),c=n(73),i=Object.assign;t.exports=!i||n(17)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=i({},t)[n]||Object.keys(i({},e)).join("")!=r})?function(t,e){for(var n=u(t),i=arguments.length,s=1,f=o.f,l=a.f;i>s;)for(var d,p=c(arguments[s++]),v=f?r(p).concat(f(p)):r(p),h=v.length,y=0;h>y;)l.call(p,d=v[y++])&&(n[d]=p[d]);return n}:i},function(t,e,n){var r=n(6);r(r.S+r.F,"Object",{assign:n(108)})},function(t,e,n){n(109),t.exports=n(2).Object.assign},function(t,e){t.exports=a},function(t,e){!function(e){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},u=a.iterator||"@@iterator",c=a.asyncIterator||"@@asyncIterator",i=a.toStringTag||"@@toStringTag",s="object"==typeof t,f=e.regeneratorRuntime;if(f)s&&(t.exports=f);else{(f=e.regeneratorRuntime=s?t.exports:{}).wrap=_;var l="suspendedStart",d="suspendedYield",p="executing",v="completed",h={},y={};y[u]=function(){return this};var g=Object.getPrototypeOf,b=g&&g(g(I([])));b&&b!==r&&o.call(b,u)&&(y=b);var m=O.prototype=w.prototype=Object.create(y);C.prototype=m.constructor=O,O.constructor=C,O[i]=C.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===C||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,O):(t.__proto__=O,i in t||(t[i]="GeneratorFunction")),t.prototype=Object.create(m),t},f.awrap=function(t){return{__await:t}},E(k.prototype),k.prototype[c]=function(){return this},f.AsyncIterator=k,f.async=function(t,e,n,r){var o=new k(_(t,e,n,r));return f.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},E(m),m[i]="Generator",m[u]=function(){return this},m.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},f.values=I,A.prototype={constructor:A,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(S),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return c.type="throw",c.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var u=this.tryEntries[a],c=u.completion;if("root"===u.tryLoc)return r("end");if(u.tryLoc<=this.prev){var i=o.call(u,"catchLoc"),s=o.call(u,"finallyLoc");if(i&&s){if(this.prev<u.catchLoc)return r(u.catchLoc,!0);if(this.prev<u.finallyLoc)return r(u.finallyLoc)}else if(i){if(this.prev<u.catchLoc)return r(u.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return r(u.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var a=r;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var u=a?a.completion:{};return u.type=t,u.arg=e,a?(this.method="next",this.next=a.finallyLoc,h):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),S(n),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;S(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:I(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),h}}}function _(t,e,n,r){var o=e&&e.prototype instanceof w?e:w,a=Object.create(o.prototype),u=new A(r||[]);return a._invoke=function(t,e,n){var r=l;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===v){if("throw"===o)throw a;return L()}for(n.method=o,n.arg=a;;){var u=n.delegate;if(u){var c=N(u,n);if(c){if(c===h)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===l)throw r=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var i=x(t,e,n);if("normal"===i.type){if(r=n.done?v:d,i.arg===h)continue;return{value:i.arg,done:n.done}}"throw"===i.type&&(r=v,n.method="throw",n.arg=i.arg)}}}(t,n,u),a}function x(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function w(){}function C(){}function O(){}function E(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function k(t){var e;this._invoke=function(n,r){function a(){return new Promise(function(e,a){!function e(n,r,a,u){var c=x(t[n],t,r);if("throw"!==c.type){var i=c.arg,s=i.value;return s&&"object"==typeof s&&o.call(s,"__await")?Promise.resolve(s.__await).then(function(t){e("next",t,a,u)},function(t){e("throw",t,a,u)}):Promise.resolve(s).then(function(t){i.value=t,a(i)},u)}u(c.arg)}(n,r,e,a)})}return e=e?e.then(a,a):a()}}function N(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,N(t,e),"throw"===e.method))return h;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=x(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,h;var a=o.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,h):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,h)}function T(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function A(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(T,this),this.reset(!0)}function I(t){if(t){var e=t[u];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,a=function e(){for(;++r<t.length;)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return a.next=a}}return{next:L}}function L(){return{value:n,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,n){var r=function(){return this}()||Function("return this")(),o=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,a=o&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,t.exports=n(112),o)r.regeneratorRuntime=a;else try{delete r.regeneratorRuntime}catch(t){r.regeneratorRuntime=void 0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=l(n(8));e.default=p;var o=n(7),a=l(n(34)),u=l(n(22)),c=l(n(60)),i=l(n(59)),s=l(n(56)),f=l(n(30));function l(t){return t&&t.__esModule?t:{default:t}}var d=r.default.mark(p);function p(){return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,(0,o.all)([(0,o.fork)(a.default),(0,o.fork)(u.default),(0,o.fork)(c.default),(0,o.fork)(i.default),(0,o.fork)(s.default),(0,o.fork)(f.default)]);case 2:case"end":return t.stop()}},d,this)}},function(t,e,n){"use strict";var r=n(61),o=i(n(23)),a=i(n(114)),u=i(n(83)),c=n(46);i(n(51));function i(t){return t&&t.__esModule?t:{default:t}}t.exports=function(t){var e=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||r.compose,n={contracts:(0,c.generateContractsInitialState)(t)},i=(0,o.default)(),s=(0,r.createStore)(u.default,n,e((0,r.applyMiddleware)(i)));return i.run(a.default),s}},function(t,e,n){"use strict";var r=n(6),o=n(35),a=n(64);r(r.S,"Promise",{try:function(t){var e=o.f(this),n=a(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},function(t,e,n){"use strict";var r=n(6),o=n(2),a=n(1),u=n(66),c=n(63);r(r.P+r.R,"Promise",{finally:function(t){var e=u(this,o.Promise||a.Promise),n="function"==typeof t;return this.then(n?function(n){return c(e,t()).then(function(){return n})}:t,n?function(n){return c(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){"use strict";var r=n(1),o=n(2),a=n(3),u=n(4),c=n(0)("species");t.exports=function(t){var e="function"==typeof o[t]?o[t]:r[t];u&&e&&!e[c]&&a.f(e,c,{configurable:!0,get:function(){return this}})}},function(t,e,n){var r=n(11);t.exports=function(t,e,n){for(var o in e)n&&t[o]?t[o]=e[o]:r(t,o,e[o]);return t}},function(t,e,n){var r=n(1),o=n(65).set,a=r.MutationObserver||r.WebKitMutationObserver,u=r.process,c=r.Promise,i="process"==n(14)(u);t.exports=function(){var t,e,n,s=function(){var r,o;for(i&&(r=u.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(i)n=function(){u.nextTick(s)};else if(!a||r.navigator&&r.navigator.standalone)if(c&&c.resolve){var f=c.resolve();n=function(){f.then(s)}}else n=function(){o.call(r,s)};else{var l=!0,d=document.createTextNode("");new a(s).observe(d,{characterData:!0}),n=function(){d.data=l=!l}}return function(r){var o={fn:r,next:void 0};e&&(e.next=o),t||(t=o,n()),e=o}}},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){var r=n(18),o=n(69),a=n(68),u=n(5),c=n(40),i=n(67),s={},f={};(e=t.exports=function(t,e,n,l,d){var p,v,h,y,g=d?function(){return t}:i(t),b=r(n,l,e?2:1),m=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(a(g)){for(p=c(t.length);p>m;m++)if((y=e?b(u(v=t[m])[0],v[1]):b(t[m]))===s||y===f)return y}else for(h=g.call(t);!(v=h.next()).done;)if((y=o(h,b,v.value,e))===s||y===f)return y}).BREAK=s,e.RETURN=f},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){"use strict";var r,o,a,u,c=n(27),i=n(1),s=n(18),f=n(70),l=n(6),d=n(10),p=n(28),v=n(123),h=n(122),y=n(66),g=n(65).set,b=n(120)(),m=n(35),_=n(64),x=n(63),w=i.TypeError,C=i.process,O=i.Promise,E="process"==f(C),k=function(){},N=o=m.f,T=!!function(){try{var t=O.resolve(1),e=(t.constructor={})[n(0)("species")]=function(t){t(k,k)};return(E||"function"==typeof PromiseRejectionEvent)&&t.then(k)instanceof e}catch(t){}}(),S=function(t){var e;return!(!d(t)||"function"!=typeof(e=t.then))&&e},A=function(t,e){if(!t._n){t._n=!0;var n=t._c;b(function(){for(var r=t._v,o=1==t._s,a=0,u=function(e){var n,a,u=o?e.ok:e.fail,c=e.resolve,i=e.reject,s=e.domain;try{u?(o||(2==t._h&&j(t),t._h=1),!0===u?n=r:(s&&s.enter(),n=u(r),s&&s.exit()),n===e.promise?i(w("Promise-chain cycle")):(a=S(n))?a.call(n,c,i):c(n)):i(r)}catch(t){i(t)}};n.length>a;)u(n[a++]);t._c=[],t._n=!1,e&&!t._h&&I(t)})}},I=function(t){g.call(i,function(){var e,n,r,o=t._v,a=L(t);if(a&&(e=_(function(){E?C.emit("unhandledRejection",o,t):(n=i.onunhandledrejection)?n({promise:t,reason:o}):(r=i.console)&&r.error&&r.error("Unhandled promise rejection",o)}),t._h=E||L(t)?2:1),t._a=void 0,a&&e.e)throw e.v})},L=function(t){return 1!==t._h&&0===(t._a||t._c).length},j=function(t){g.call(i,function(){var e;E?C.emit("rejectionHandled",t):(e=i.onrejectionhandled)&&e({promise:t,reason:t._v})})},P=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),A(e,!0))},R=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw w("Promise can't be resolved itself");(e=S(t))?b(function(){var r={_w:n,_d:!1};try{e.call(t,s(R,r,1),s(P,r,1))}catch(t){P.call(r,t)}}):(n._v=t,n._s=1,A(n,!1))}catch(t){P.call({_w:n,_d:!1},t)}}};T||(O=function(t){v(this,O,"Promise","_h"),p(t),r.call(this);try{t(s(R,this,1),s(P,this,1))}catch(t){P.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(119)(O.prototype,{then:function(t,e){var n=N(y(this,O));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=E?C.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&A(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),a=function(){var t=new r;this.promise=t,this.resolve=s(R,t,1),this.reject=s(P,t,1)},m.f=N=function(t){return t===O||t===u?new a(t):o(t)}),l(l.G+l.W+l.F*!T,{Promise:O}),n(24)(O,"Promise"),n(118)("Promise"),u=n(2).Promise,l(l.S+l.F*!T,"Promise",{reject:function(t){var e=N(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(c||!T),"Promise",{resolve:function(t){return x(c&&this===u?O:this,t)}}),l(l.S+l.F*!(T&&n(62)(function(t){O.all(t).catch(k)})),"Promise",{all:function(t){var e=this,n=N(e),r=n.resolve,o=n.reject,a=_(function(){var n=[],a=0,u=1;h(t,!1,function(t){var c=a++,i=!1;n.push(void 0),u++,e.resolve(t).then(function(t){i||(i=!0,n[c]=t,--u||r(n))},o)}),--u||r(n)});return a.e&&o(a.v),n.promise},race:function(t){var e=this,n=N(e),r=n.reject,o=_(function(){h(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e){t.exports=function(){}},function(t,e,n){"use strict";var r=n(126),o=n(125),a=n(15),u=n(13);t.exports=n(77)(Array,"Array",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),a.Arguments=a.Array,r("keys"),r("values"),r("entries")},function(t,e,n){var r=n(9),o=n(36),a=n(39)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,a)?t[a]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){var r=n(42),o=Math.max,a=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):a(t,e)}},function(t,e,n){var r=n(13),o=n(40),a=n(129);t.exports=function(t){return function(e,n,u){var c,i=r(e),s=o(i.length),f=a(u,s);if(t&&n!=n){for(;s>f;)if((c=i[f++])!=c)return!0}else for(;s>f;f++)if((t||f in i)&&i[f]===n)return t||f||0;return!t&&-1}}},function(t,e,n){var r=n(3),o=n(5),a=n(26);t.exports=n(4)?Object.defineProperties:function(t,e){o(t);for(var n,u=a(e),c=u.length,i=0;c>i;)r.f(t,n=u[i++],e[n]);return t}},function(t,e,n){"use strict";var r=n(75),o=n(16),a=n(24),u={};n(11)(u,n(0)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(u,{next:o(1,n)}),a(t,e+" Iterator")}},function(t,e,n){var r=n(42),o=n(41);t.exports=function(t){return function(e,n){var a,u,c=String(o(e)),i=r(n),s=c.length;return i<0||i>=s?t?"":void 0:(a=c.charCodeAt(i))<55296||a>56319||i+1===s||(u=c.charCodeAt(i+1))<56320||u>57343?t?c.charAt(i):a:t?c.slice(i,i+2):u-56320+(a-55296<<10)+65536}}},function(t,e,n){n(78),n(43),n(71),n(124),n(117),n(116),t.exports=n(2).Promise},function(t,e,n){t.exports={default:n(134),__esModule:!0}},function(t,e,n){var r=n(6);r(r.S+r.F*!n(4),"Object",{defineProperty:n(3).f})},function(t,e,n){n(136);var r=n(2).Object;t.exports=function(t,e,n){return r.defineProperty(t,e,n)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=a(n(82)),o=a(n(81));function a(t){return t&&t.__esModule?t:{default:t}}var u=new(a(n(135)).default)(function(t,e){window.addEventListener("load",t)}),c=function(){function t(e,n){var o=this;(0,r.default)(this,t),this.contracts={},this.contractList=[],this.options=e,this.store=n,this.web3={},this.loadingContract={},u.then(function(){n.dispatch({type:"DRIZZLE_INITIALIZING",drizzle:o,options:e})})}return(0,o.default)(t,[{key:"addContract",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];this.store.dispatch({type:"ADD_CONTRACT",drizzle:this,contractConfig:t,events:e,web3:this.web3})}},{key:"_addContract",value:function(t){if(this.contracts[t.contractName])throw"Contract already exists: "+t.contractName;this.contracts[t.contractName]=t,this.contractList.push(t)}},{key:"findContractByAddress",value:function(t){return this.contractList.find(function(e){return e.address.toLowerCase()===t.toLowerCase()})}}]),t}();e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.drizzleSagas=e.drizzleReducers=e.generateStore=e.generateContractsInitialState=e.Drizzle=void 0;var r=m(n(138)),o=m(n(115)),a=n(46),u=m(n(55)),c=m(n(54)),i=m(n(53)),s=m(n(50)),f=m(n(49)),l=m(n(48)),d=m(n(47)),p=m(n(34)),v=m(n(22)),h=m(n(60)),y=m(n(59)),g=m(n(56)),b=m(n(30));function m(t){return t&&t.__esModule?t:{default:t}}var _={accounts:u.default,accountBalances:c.default,contracts:i.default,drizzleStatus:s.default,transactions:f.default,transactionStack:l.default,web3:d.default},x=[p.default,v.default,h.default,y.default,g.default,b.default];e.Drizzle=r.default,e.generateContractsInitialState=a.generateContractsInitialState,e.generateStore=o.default,e.drizzleReducers=_,e.drizzleSagas=x}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,